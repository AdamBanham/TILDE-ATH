print number to halve?:;
INPUT NUM;
import blah BLAH;
//print this shouldn't print
/* print this shouldnt print either */
BIFURCATE [NULL,NULL]2NULL;
BIFURCATE [NUM,NUM]2NUM;
BIFURCATE 2NUM[NUMCPY,JUNK];
BIFURCATE [BLAH,BLAH]2BLAH;
BIFURCATE 2NULL[SUBCOUNT,REMAINDER];
~ATH(NUMCPY){
BIFURCATE 2BLAH[UNEVEN,JUNK];
BIFURCATE NUMCPY[JUNK,NUMCPY];
print s1;
BIFURCATE [NUMCPY,NUMCPY]2NUMCPY;
BIFURCATE 2NUMCPY[NUMCPYCPY,JUNK];
~ATH(NUMCPYCPY){
BIFURCATE [BLAH,SUBCOUNT]SUBCOUNT;
BIFURCATE NUMCPY[JUNK,NUMCPY];
print s2;
BIFURCATE 2NULL[UNEVEN,NUMCPYCPY];
}
~ATH(UNEVEN){
BIFURCATE [BLAH,REMAINDER]REMAINDER;
BIFURCATE 2NULL[UNEVEN,JUNK];
}
}
BIFURCATE [SUBCOUNT,SUBCOUNT]2SUBCOUNT;
BIFURCATE 2SUBCOUNT[NUMDIV2,NUMDIV2CPY];
print the number is:;
~ATH(NUM){
    print 1;
    BIFURCATE NUM[JUNK,NUM];
}
print the number divided by 2 in unary is :0+;
~ATH(NUMDIV2CPY){
    print 1;
    BIFURCATE NUMDIV2CPY[JUNK,NUMDIV2CPY];
}
print remainder is: 0+;
~ATH(REMAINDER){
    print 1;
    BIFURCATE REMAINDER[JUNK,REMAINDER];
}
